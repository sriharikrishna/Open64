#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for whirl2f
#

#----------------------------------------------------------------------
#  Information about Makefile
#
#  This Makefile is used to build the 32 bit host/target version of
#  whirl2f
#
#  *  This Makefile does not require that targ_info has already been built.
#
#  *  Because the Makefile removes temporary files that are in the
#     current directory (at startup and on interrupts) you can't
#     run two or more makes in the same directory at the same time.
#     (Perhaps, If I could force the temp files out to a temp directory,
#     this could be changed?)
#
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build.
#               e.q.  /d1/cmplrs.src/v4.00/host32
#
#----------------------------------------------------------------------
TARGDIR = $(BUILD_AREA)
CURDIR  = .

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#----------------------------------------------------------------------
ifeq ($(BUILD_COMPILER), VENDOR)
  ifeq ($(BUILD_OS), IRIX)
    CVERSION  =  -xansi
    HOSTDEFS += -D_LONGLONG -D_SVR4_SOURCE # for compilation with -ansi
  endif
else
  CVERSION =
  HOSTDEFS += -D_LONGLONG -D_SVR4_SOURCE # for compilation with -ansi
endif

#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------
HOSTDEFS += -Dsgi
HOSTDEFS += -Dlonglong
# need to define BUILD_WNPREFETCH to get appropriate code from common sources
HOSTDEFS += -DMONGOOSE_BE -D_LIBELF_XTND_64

ifeq ($(BUILD_VARIANT), DEBUG)
  HOSTDEFS += -DIs_True_On
  HOSTDEFS += -DInsist_On 
endif

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------

BE_DIR 			= $(BUILD_BASE)/..
BE_MIPS_DIR 		= $(BE_DIR)/MIPS
BE_BE_DIR 		= $(BE_DIR)/be
BE_COM_DIR 		= $(BE_DIR)/com
BE_WHIRL2F_DIR 		= $(BE_DIR)/whirl2f
BE_WHIRL2C_DIR          = $(BE_DIR)/whirl2c
COMMON_DIR 		= $(BUILD_TOT)/common
COMMON_COM_DIR 		= $(COMMON_DIR)/com
COMMON_UTIL_DIR 	= $(COMMON_DIR)/util
INCLUDE_DIR 		= $(ROOT)/usr/include
IPA_COM_DIR 		= $(BUILD_TOT)/ipa/common/
LIBCOMUTIL_DIR 		= $(BUILD_TOT)/libcomutil
TARG_BE_DIR             = $(TARGDIR)/be

COMMON_COM_TARGET_DIR   = $(COMMON_COM_DIR)/ia64
COMMON_UTIL_TARGET_DIR  = $(COMMON_UTIL_DIR)/ia64

TARG_COMUTIL_DIR	= $(TARGDIR)/libcomutil


# These are the directories in which to look for source files.

SRC_DIRS = \
  $(BE_COM_DIR)		\
  $(BE_REGION_DIR)	\
  $(BE_WHIRL2F_DIR)	\
  $(BE_WHIRL2C_DIR)	

HEADER_DIRS = \
  $(SRC_DIRS)		\
  $(COMMON_COM_DIR)	\
  $(COMMON_COM_TARGET_DIR) \
  $(COMMON_LIB_DIR)	\
  $(COMMON_UTIL_DIR)	\
  $(COMMON_UTIL_TARGET_DIR) \
  $(TARG_BE_DIR)	\
  $(BE_DIR)		\
  $(BE_BE_DIR)		\
  $(BE_CG_DIR)		\
  $(BE_OPT_DIR)		\
  $(BE_LNO_DIR)


#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

BE_WHIRL2C_C_SRCS = \
  diagnostics.cxx	\
  PUinfo.cxx		\
  stab_attr.cxx		\
  token_buffer.cxx	\
  w2cf_parentize.cxx	\
  w2cf_symtab.cxx	\
  wn_attr.cxx		

BE_WHIRL2F_C_SRCS = \
  init2f.cxx		\
  st2f.cxx		\
  tcon2f.cxx		\
  ty2f.cxx		\
  whirl2f_common.cxx	\
  wn2f.cxx		\
  wn2f_expr.cxx		\
  wn2f_io.cxx		\
  wn2f_load_store.cxx	\
  wn2f_stmt.cxx		\
  wn2f_pragma.cxx	\
  w2f_driver.cxx	\
  init.cxx		\

WHIRL2F_C_SRCS = \
  $(BE_WHIRL2C_C_SRCS)	\
  $(BE_WHIRL2F_C_SRCS)  

WHIRL2F_DRIVER_SRCS = \
  whirl2f.cxx

WHIRL2F_MAIN_SRCS = \
  whirl2f_main.cxx



BE_EXE = $(addsuffix $(EXEext), be)
BE_DSO = $(addsuffix $(DSOext), be)


CFILES =
CXXFILES = $(WHIRL2F_C_SRCS) $(WHIRL2F_DRIVER_SRCS) $(WHIRL2F_MAIN_SRCS)

WHIRL2F_C_OBJS = $(WHIRL2F_C_SRCS:.cxx=.o)
WHIRL2F_DRIVER_OBJS = $(WHIRL2F_DRIVER_SRCS:.cxx=.o)
WHIRL2F_MAIN_OBJS = $(WHIRL2F_MAIN_SRCS:.cxx=.o)


VPATH    =  $(SRC_DIRS)

LCOPTS = $(STD_COMPILE_OPTS) -fullwarn
LCDEFS = $(HOSTDEFS) $(TARGDEFS)


#----------------------------------------------------------------------
# define LCINCS and LCXXINCS
#----------------------------------------------------------------------
HEADER_DIRS += $(BUILD_TOT)/include

LCINCS = $(addprefix -I, $(HEADER_DIRS))

ifeq ($(BUILD_OS), LINUX)
  LCINCS += -I$(BUILD_AREA)/include
endif

ifneq ($(STL_EXT_PATH),)
  LCINCS += -I$(STL_EXT_PATH)
endif

LCXXINCS := $(LCINCS)


LC++OPTS = $(STD_COMPILE_OPTS)
LC++DEFS = $(HOSTDEFS) $(TARGDEFS)

LASDEFS = $(HOSTDEFS) $(TARGDEFS)
LASINCS = $(LCINCS)
LASOPTS = $(STD_COMPILE_OPTS)

# setup stuff to build shared or non-shared
GLDOPTS = $(STD_LOAD_OPTS) $(LD_QUICKSTART_INFO)

ifeq ($(BUILD_OS), IRIX)
  DSOSTARTOPT = -check_registry $(TARGDIR)/be/so_locations -no_unresolved
else
  DSOSTARTOPT = 
endif
DSOSTARTOPT_32 = -32 $(DSOSTARTOPT)
DSOSTARTOPT_N32 = -n32 $(DSOSTARTOPT)

# To ensure 32 bits linking of whirl2f.so:
LDFLAGS += -32

#----------------------------------------------------------------------
# File containing the list of symbols exported outside of whirl2f.so
#----------------------------------------------------------------------
ifeq ($(BUILD_COMPILER), VENDOR)
  EXPORT_LIST = -exports_file $(BE_WHIRL2F_DIR)/Exported
else
  EXPORT_LIST =
endif

#----------------------------------------------------------------------
#  Define target
#----------------------------------------------------------------------


WHIRL2F_EXE = $(addsuffix $(EXEext), whirl2f)
WHIRL2F_DSO = $(addsuffix $(DSOext), whirl2f)
WHIRL2F_BE_EXE = $(addsuffix $(EXEext), whirl2f_be)
WHIRL2F90_EXE = $(addsuffix $(EXEext), whirl2f90)


TARGETS = $(WHIRL2F_EXE) $(WHIRL2F_BE_EXE) $(WHIRL2F_DSO) $(WHIRL2F90_EXE)

ifdef LOCAL_TARG_INFO_DIR
  TARG_TARG_INFO_DIR = $(TARGDIR)/$(LOCAL_TARG_INFO_DIR)
else
  TARG_TARG_INFO_DIR = $(TARGDIR)/targ_info
endif

ifeq ($(BUILD_TARGET), MIPS)
  TARGET_SO = $(addsuffix $(DSOext), r10000)
endif
ifeq ($(BUILD_TARGET), IA64)
  TARGET_SO = $(addsuffix $(DSOext), itanium)
endif
ifeq ($(BUILD_TARGET), IA32)
  TARGET_SO = $(addsuffix $(DSOext), pentium)
endif

# extra files to be removed with make clobber
LDIRT += $(BE_EXE) $(BE_DSO) $(TARGET_SO) $(WHIRL2F90_EXE) whirl2c_be \
	so_locations


#----------------------------------------------------------------------
#  Variables describing additional sources, objects, and libraries
#----------------------------------------------------------------------

LLDLIBS	+= -lc

ifeq ($(BUILD_OS), IRIX)
ifeq ($(BUILD_COMPILER), VENDOR)
  LLDLIBS := -none $(LLDLIBS)
endif
endif

#---------------------------------------------------------------------
#  Extra Rules added by Solaris_revision
#---------------------------------------------------------------------

ifeq ($(BUILD_OS), IRIX)
 ifeq ($(BUILD_COMPILER), VENDOR)
 CXXFLAGS += -woff 1744,1552
 endif
endif

ifeq ($(BUILD_OS), LINUX)
  CFLAGS  += -D_LINUX_LINUX
  CXXFLAGS += -D_LINUX_LINUX
endif

ifeq ($(BUILD_OS), SOLARIS)
CFLAGS = -D_SOLARIS_SOLARIS -D_SOLARIS -Dlonglong -D_LONGLONG -D_SVR4_SOURCE \
	-DMONGOOSE_BE -DBUILD_WNPREFETCH -D_LIBELF_XTND_64 $(LCINCS) $(OPTIMIZER)
  ifeq ($(BUILD_COMPILER), VENDOR)
  ifeq ($(BUILD_SB), YES)
    CFLAGS += -xsb
  endif
  endif
  ifeq ($(BUILD_COMPILER), GNU)
    CFLAGS +=  -D__GNU_BUG_WORKAROUND
  endif
  CXXFLAGS = $(CFLAGS) -w
endif

#---------------------------------------------------------------------

default: first depends $(TARGETS) last

#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is
#  built.
#----------------------------------------------------------------------
first:
	cd $(TARGDIR)/be && $(MAKE)
ifeq ($(BUILD_OS), LINUX)
	cd $(BUILD_AREA)/include && $(MAKE)
	if ! test -f $(TARGET_SO); then ln -sf $(TARG_TARG_INFO_DIR)/$(TARGET_SO) .; fi
endif

include $(BUILD_TOT)/Makeinclude

#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is
#  built.
#----------------------------------------------------------------------
DIRTS =

#----------------------------------------------------------------------
#  Build 'whirl2f.so', 'whirl2f_be' and 'whirl2f'
#
#  These rules build the 'whirl2f.so' by default, and can install
#  it in the $(STD_MONGOOSE_LOC) directory.
#----------------------------------------------------------------------
install:: default
	$(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) -F $(STD_MONGOOSE_LOC) \
	  $(WHIRL2F_DSO) $(WHIRL2F_EXE)
	$(STD_INSTALL) -lns $(BE_EXE) -F $(STD_MONGOOSE_LOC) $(WHIRL2F_BE_EXE)


#----------------------------------------------------------------------
# Rules for "whirl2f.so" changed by Solaris porting
#
# add -G for dynamic shared object, remove $(STD_DSO_LOADOPTS) $(EXPORT_LIST)
# $(LDFLAGS) $(LLDLIBS), LLDLIBS = -none -lc  
#----------------------------------------------------------------------

ifeq ($(filter LINUX TRU64 IRIX, $(BUILD_OS)), $(BUILD_OS))
  WHIRL2F_LIBS += $(BE_DSO)
endif
ifeq ($(BUILD_OS), IRIX)
  # On IRIX, we link with libcomutil.a to grab the definition of
  # ux_strncasecmp().  For some reason, even when the symbol is externed
  # in the source and in libcomutil.a, it remains 'HIDDEN' within be.so 
  # and the runtime link will fail. 
  WHIRL2F_LIBS += $(TARG_COMUTIL_DIR)/libcomutil.a
endif


ifeq ($(BUILD_OS), SOLARIS)
  WHIRL2F_SO_LOC = $(BE_WHIRL2F_DIR)/Exported $(BE_BE_DIR)/so_locations
endif

$(WHIRL2F_DSO): $(WHIRL2F_C_OBJS) $(WHIRL2F_LIBS) $(WHIRL2F_SO_LOC)
ifeq ($(BUILD_OS), SOLARIS)
	$(CXX) -G      -o $@ $(WHIRL2F_C_OBJS) $(WHIRL2F_LIBS)
else
	$(CXX) -shared -o $@ $(WHIRL2F_C_OBJS) $(WHIRL2F_LIBS)
endif


#----------------------------------------------------------------------
#  Rules for "whirl2f_be" changed by Solaris porting
#----------------------------------------------------------------------
$(WHIRL2F_BE_EXE): $(WHIRL2F_DSO)
	(cd $(TARGDIR)/be; \
	$(MAKE) BE_OPT_DIR='$(BE_OPT_DIR)' \
	        LINK_DSO='$(LINK_DSO)' \
	        LINK_DSO_OPTS='$(LINK_DSO_OPTS) -L.' \
	        $(BE_EXE))
	if test ! -r $(WHIRL2F_BE_EXE); then \
	  ln -f -s $(TARGDIR)/be/$(BE_EXE) $(WHIRL2F_BE_EXE) ; \
	fi

#---------------------------------------------------------------------
#  Rules for "whirl2f" changed by Solaris porting
#
#  $(LDFLAGS) is removed
#---------------------------------------------------------------------
$(WHIRL2F_EXE): $(WHIRL2F_DSO) $(WHIRL2F_BE_EXE) $(WHIRL2F_MAIN_OBJS) \
                $(BE_DSO) $(BE_EXE)
	rm -f $(WHIRL2F90_EXE)
	$(C++F) -o $(WHIRL2F_EXE) $(WHIRL2F_MAIN_OBJS)

$(WHIRL2F90_EXE): $(WHIRL2F_EXE)
	if test ! -r $(WHIRL2F90_EXE); then \
	  ln -f $(TARGDIR)/be/$(BE_EXE) $(WHIRL2F90_EXE) ; \
	fi

$(BE_DSO):
	if test ! -r $(BE_DSO); then \
	  ln -f -s $(TARGDIR)/be/$(BE_DSO) ./$(BE_DSO); \
	fi

$(BE_EXE):
	if test ! -r $(BE_EXE); then \
	  ln -f -s $(TARGDIR)/be/$(BE_EXE) ./$(BE_EXE); \
	fi

#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)

#----------------------------------------------------------------------
#  Special case rules for files that want to be individualistic
#----------------------------------------------------------------------

