 LOC 0 0 source files:	1	"/m_home/m_utkej/Argonne/Dev/Current/OpenAD/Open64/osprey1.0/tests/fortran90/single_file_tests/constants.f"
 LOC 1 1 	  module single
FUNC_ENTRY <1,20,single_>
BODY
 BLOCK
 END_BLOCK
 BLOCK
 END_BLOCK
 BLOCK
 PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
 END_BLOCK
 LOC 1 3         real ( float ) :: pi = 3.1415927_float
 LOC 1 4         real ( float ) :: e  = 2.7182818_float
 LOC 1 5       end module single
 LOC 1 6 
 LOC 1 7       module double
FUNC_ENTRY <1,26,double_>
BODY
 BLOCK
 END_BLOCK
 BLOCK
 END_BLOCK
 BLOCK
 PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
 END_BLOCK
 LOC 1 9         real ( float ) :: pi = 3.141592653589793_float
 LOC 1 10         real ( float ) :: e  = 2.718281828459045_float
 LOC 1 11       end module double
 LOC 1 12 
 LOC 1 13       program constants
FUNC_ENTRY <1,32,constants_>
BODY
 BLOCK
 END_BLOCK
 BLOCK
 END_BLOCK
 BLOCK
 PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
 LOC 1 16 !     USE SINGLE selects single precision whereas
 LOC 1 17 !     USE DOUBLE selects double precision.  Only one
 LOC 1 18 !     precision can be in selected per subprogram.
 LOC 1 19 !     Let the main program select single precision.
 LOC 1 20       use single
 VUSE <1,20,single_>
 USE!!!!!
 LOC 1 21       character (len=60) :: pi_single
 LOC 1 22       character (len=60) :: e_single
 LOC 1 23       integer :: eslen, pislen
 LOC 1 24       write (UNIT=pi_single, FMT=*) pi
 COMMENT <2,7,write (UNIT=pi_single, FMT=*) pi> # 
 PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
    U8LDA 0 <2,5,PI_SINGLE> T<32,anon_ptr.,8>
    I4INTCONST 60 (0x3c)
    U8INTCONST 0 (0x0)
   U8ARRAY 1 1
   I4INTCONST 60 (0x3c)
  IO_ITEM <4,INTERNAL>
  IO_ITEM <10,NONE>
   I4INTCONST 3 (0x3)
  IO_ITEM <73,FIRST_LAST_FLAG>
   I4INTCONST 0 (0x0)
  IO_ITEM <70,END_EOR_EOF_FLAG>
   I4INTCONST 0 (0x0)
  IO_ITEM <76,ENCODE_DECODE_FLAG>
   F4F4LDID 0 <1,23,PI> T<10,.predef_F4,4>
   I8INTCONST 288799936059801600 (0x402060300000000)
  IO_ITEM <98,EXPR> T<10,.predef_F4,4>
 IO <22,FORMATTED_WRITE,cray> 2
 PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
 LOC 1 25 	  write (UNIT=e_single, FMT=*) e
 COMMENT <2,8,write (UNIT=e_single, FMT=*) e> # 
 PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
    U8LDA 0 <2,2,E_SINGLE> T<32,anon_ptr.,8>
    I4INTCONST 60 (0x3c)
    U8INTCONST 0 (0x0)
   U8ARRAY 1 1
   I4INTCONST 60 (0x3c)
  IO_ITEM <4,INTERNAL>
  IO_ITEM <10,NONE>
   I4INTCONST 3 (0x3)
  IO_ITEM <73,FIRST_LAST_FLAG>
   I4INTCONST 0 (0x0)
  IO_ITEM <70,END_EOR_EOF_FLAG>
   I4INTCONST 0 (0x0)
  IO_ITEM <76,ENCODE_DECODE_FLAG>
   F4F4LDID 0 <1,21,E> T<10,.predef_F4,4>
   I8INTCONST 288799936059801600 (0x402060300000000)
  IO_ITEM <98,EXPR> T<10,.predef_F4,4>
 IO <22,FORMATTED_WRITE,cray> 2
 PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
 LOC 1 26 	  pislen=len_trim(adjustl(pi_single))
 BODY
       U8LDA 0 <2,5,PI_SINGLE> T<32,anon_ptr.,8>
       I4INTCONST 60 (0x3c)
       U8INTCONST 0 (0x0)
      U8ARRAY 1 1
     U8PARM 1 T<32,anon_ptr.,8> #  by_reference 
      I4INTCONST 60 (0x3c)
     I4PARM 2 T<4,.predef_I4,4> #  by_value 
    U1CALL 2174 <1,38,ADJUSTL> # flags 0x87e
   U8PARM 1 T<32,anon_ptr.,8> #  by_reference 
    U4INTCONST 60 (0x3c)
   U4PARM 2 T<8,.predef_U4,4> #  by_value 
  I4CALL 2174 <1,37,LEN_TRIM> # flags 0x87e
 I4STID 0 <2,4,PISLEN> T<4,.predef_I4,4>
 LOC 1 27 	  eslen=len_trim(adjustl(e_single))
 BODY
       U8LDA 0 <2,2,E_SINGLE> T<32,anon_ptr.,8>
       I4INTCONST 60 (0x3c)
       U8INTCONST 0 (0x0)
      U8ARRAY 1 1
     U8PARM 1 T<32,anon_ptr.,8> #  by_reference 
      I4INTCONST 60 (0x3c)
     I4PARM 2 T<4,.predef_I4,4> #  by_value 
    U1CALL 2174 <1,38,ADJUSTL> # flags 0x87e
   U8PARM 1 T<32,anon_ptr.,8> #  by_reference 
    U4INTCONST 60 (0x3c)
   U4PARM 2 T<8,.predef_U4,4> #  by_value 
  I4CALL 2174 <1,37,LEN_TRIM> # flags 0x87e
 I4STID 0 <2,1,ESLEN> T<4,.predef_I4,4>
 LOC 1 28       if((pislen.GE.7).AND.(eslen.GE.7)) then
 IF
    I4I4LDID 0 <2,1,ESLEN> T<4,.predef_I4,4>
    I4INTCONST 7 (0x7)
   I4I4GE
    I4I4LDID 0 <2,4,PISLEN> T<4,.predef_I4,4>
    I4INTCONST 7 (0x7)
   I4I4GE
  I4LAND
 THEN
  BLOCK
 LOC 1 29            call more_precision
  VCALL 2174 <1,33,more_precision_> # flags 0x87e
  END_BLOCK
 ELSE
 LOC 1 28
  BLOCK
 LOC 1 30       else
 LOC 1 31            print *, "failed"
  COMMENT <2,9,print *, "failed"> # 
  PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
   IO_ITEM <1,NONE>
   IO_ITEM <10,NONE>
    I4INTCONST 3 (0x3)
   IO_ITEM <73,FIRST_LAST_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <70,END_EOR_EOF_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <76,ENCODE_DECODE_FLAG>
    U8LDA 0 <1,40,"failed"> T<38,anon_ptr.,8>
    I8INTCONST 140763258159104 (0x800600000000)
    U4INTCONST 6 (0x6)
   IO_ITEM <96,CHAR> T<37,.ch_str.,1>
  IO <22,FORMATTED_WRITE,cray> 2
  PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
  END_BLOCK
 END_IF
 LOC 1 32       end if
 LOC 1 33       end program constants
 VCALL 2174 <1,34,_END> # flags 0x87e
 RETURN
 RETURN
 END_BLOCK
 LOC 1 34 
 LOC 1 35       subroutine more_precision
FUNC_ENTRY <1,33,more_precision_>
BODY
 BLOCK
 END_BLOCK
 BLOCK
 END_BLOCK
 BLOCK
 PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
 LOC 1 36 !
 LOC 1 37 !     Let the subroutine select double precision.
 LOC 1 38       use double
 VUSE <1,26,double_>
 USE!!!!!
 LOC 1 39       character (len=60) :: pi_double
 LOC 1 40       character (len=60) :: e_double
 LOC 1 41 	  integer :: edlen, pidlen
 LOC 1 42       write (UNIT=pi_double, FMT=*) pi
 COMMENT <2,5,write (UNIT=pi_double, FMT=*) pi> # 
 PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
    U8LDA 0 <2,4,PI_DOUBLE> T<32,anon_ptr.,8>
    I4INTCONST 60 (0x3c)
    U8INTCONST 0 (0x0)
   U8ARRAY 1 1
   I4INTCONST 60 (0x3c)
  IO_ITEM <4,INTERNAL>
  IO_ITEM <10,NONE>
   I4INTCONST 3 (0x3)
  IO_ITEM <73,FIRST_LAST_FLAG>
   I4INTCONST 0 (0x0)
  IO_ITEM <70,END_EOR_EOF_FLAG>
   I4INTCONST 0 (0x0)
  IO_ITEM <76,ENCODE_DECODE_FLAG>
   F8F8LDID 0 <1,29,PI> T<11,.predef_F8,8>
   I8INTCONST 577593262164934656 (0x804060300000000)
  IO_ITEM <98,EXPR> T<11,.predef_F8,8>
 IO <22,FORMATTED_WRITE,cray> 2
 PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
 LOC 1 43 	  write (UNIT=e_double, FMT=*) e
 COMMENT <2,6,write (UNIT=e_double, FMT=*) e> # 
 PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
    U8LDA 0 <2,2,E_DOUBLE> T<32,anon_ptr.,8>
    I4INTCONST 60 (0x3c)
    U8INTCONST 0 (0x0)
   U8ARRAY 1 1
   I4INTCONST 60 (0x3c)
  IO_ITEM <4,INTERNAL>
  IO_ITEM <10,NONE>
   I4INTCONST 3 (0x3)
  IO_ITEM <73,FIRST_LAST_FLAG>
   I4INTCONST 0 (0x0)
  IO_ITEM <70,END_EOR_EOF_FLAG>
   I4INTCONST 0 (0x0)
  IO_ITEM <76,ENCODE_DECODE_FLAG>
   F8F8LDID 0 <1,27,E> T<11,.predef_F8,8>
   I8INTCONST 577593262164934656 (0x804060300000000)
  IO_ITEM <98,EXPR> T<11,.predef_F8,8>
 IO <22,FORMATTED_WRITE,cray> 2
 PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
 LOC 1 44 	  pidlen=len_trim(adjustl(pi_double))
 BODY
       U8LDA 0 <2,4,PI_DOUBLE> T<32,anon_ptr.,8>
       I4INTCONST 60 (0x3c)
       U8INTCONST 0 (0x0)
      U8ARRAY 1 1
     U8PARM 1 T<32,anon_ptr.,8> #  by_reference 
      I4INTCONST 60 (0x3c)
     I4PARM 2 T<4,.predef_I4,4> #  by_value 
    U1CALL 2174 <1,38,ADJUSTL> # flags 0x87e
   U8PARM 1 T<32,anon_ptr.,8> #  by_reference 
    U4INTCONST 60 (0x3c)
   U4PARM 2 T<8,.predef_U4,4> #  by_value 
  I4CALL 2174 <1,37,LEN_TRIM> # flags 0x87e
 I4STID 0 <2,3,PIDLEN> T<4,.predef_I4,4>
 LOC 1 45 	  edlen=len_trim(adjustl(e_double))
 BODY
       U8LDA 0 <2,2,E_DOUBLE> T<32,anon_ptr.,8>
       I4INTCONST 60 (0x3c)
       U8INTCONST 0 (0x0)
      U8ARRAY 1 1
     U8PARM 1 T<32,anon_ptr.,8> #  by_reference 
      I4INTCONST 60 (0x3c)
     I4PARM 2 T<4,.predef_I4,4> #  by_value 
    U1CALL 2174 <1,38,ADJUSTL> # flags 0x87e
   U8PARM 1 T<32,anon_ptr.,8> #  by_reference 
    U4INTCONST 60 (0x3c)
   U4PARM 2 T<8,.predef_U4,4> #  by_value 
  I4CALL 2174 <1,37,LEN_TRIM> # flags 0x87e
 I4STID 0 <2,1,EDLEN> T<4,.predef_I4,4>
 LOC 1 46 
 LOC 1 47       if((pidlen.GE.16).AND.(edlen.GE.16)) then
 IF
    I4I4LDID 0 <2,1,EDLEN> T<4,.predef_I4,4>
    I4INTCONST 16 (0x10)
   I4I4GE
    I4I4LDID 0 <2,3,PIDLEN> T<4,.predef_I4,4>
    I4INTCONST 16 (0x10)
   I4I4GE
  I4LAND
 THEN
  BLOCK
 LOC 1 48         print *, "OK"
  COMMENT <2,7,print *, "OK"> # 
  PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
   IO_ITEM <1,NONE>
   IO_ITEM <10,NONE>
    I4INTCONST 3 (0x3)
   IO_ITEM <73,FIRST_LAST_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <70,END_EOR_EOF_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <76,ENCODE_DECODE_FLAG>
    U8LDA 0 <1,44,"OK"> T<41,anon_ptr.,8>
    I8INTCONST 140763258159104 (0x800600000000)
    U4INTCONST 2 (0x2)
   IO_ITEM <96,CHAR> T<40,.ch_str.,1>
  IO <22,FORMATTED_WRITE,cray> 2
  PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
  END_BLOCK
 ELSE
 LOC 1 47
  BLOCK
 LOC 1 49       else
 LOC 1 50         print *, "failed"
  COMMENT <2,8,print *, "failed"> # 
  PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
   IO_ITEM <1,NONE>
   IO_ITEM <10,NONE>
    I4INTCONST 3 (0x3)
   IO_ITEM <73,FIRST_LAST_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <70,END_EOR_EOF_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <76,ENCODE_DECODE_FLAG>
    U8LDA 0 <1,45,"failed"> T<38,anon_ptr.,8>
    I8INTCONST 140763258159104 (0x800600000000)
    U4INTCONST 6 (0x6)
   IO_ITEM <96,CHAR> T<37,.ch_str.,1>
  IO <22,FORMATTED_WRITE,cray> 2
  PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
  END_BLOCK
 END_IF
 LOC 1 51       end if
 LOC 1 52       end subroutine more_precision
 RETURN
 END_BLOCK
