 LOC 0 0 source files:	1	"/m_home/m_utkej/Argonne/Dev/Current/OpenAD/Open64/osprey1.0/tests/fortran90/single_file_tests/target.f"
 LOC 1 2 
 LOC 1 3          module assign_pointer_class
FUNC_ENTRY <1,21,assign_pointer_class_>
BODY
 BLOCK
 END_BLOCK
 BLOCK
 END_BLOCK
 BLOCK
 INTERFACE <2,3,=>
 BODY
  FUNC_ENTRY <1,20,ASSIGN_POINTER>
   IDNAME 0 <2,1,THIS>
   IDNAME 0 <2,2,A>
 PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
 END_BLOCK
 LOC 1 8          interface assignment (=)
 LOC 1 9             module procedure assign_pointer
 LOC 1 10          end interface
 LOC 1 11          contains
 LOC 1 12          subroutine assign_pointer(this, a)
FUNC_ENTRY <1,20,ASSIGN_POINTER>
 IDNAME 0 <3,1,THIS>
 IDNAME 0 <3,2,A>
BODY
 BLOCK
 END_BLOCK
 BLOCK
 END_BLOCK
 BLOCK
 PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
 LOC 1 13          type (mytype), intent(out) :: this
 LOC 1 14          integer, target, intent(in) :: a
 LOC 1 15          this%pr => a
  I4I4LDID 0 <3,2,A> T<4,.predef_I4,4>
    U8LDA 0 <3,1,THIS> T<32,anon_ptr.,8>
   U8U8STRCTFLD T<4,.predef_I4,4> T<29,MYTYPE,8> <field_id:1>
  U8U8ILOAD 0 T<4,.predef_I4,4> T<4,.predef_I4,4>
 I4PSTORE 0 T<32,anon_ptr.,8>
 LOC 1 16          end subroutine assign_pointer
 RETURN
 END_BLOCK
 LOC 1 17 		 
 LOC 1 18 		 integer function get_val(this)
FUNC_ENTRY <1,22,GET_VAL>
 IDNAME 0 <3,2,THIS>
BODY
 BLOCK
 END_BLOCK
 BLOCK
 END_BLOCK
 BLOCK
 PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
 LOC 1 19          type (mytype), intent(out) :: this
 LOC 1 20 		 get_val=this%pr
     U8LDA 0 <3,2,THIS> T<32,anon_ptr.,8>
    U8U8STRCTFLD T<4,.predef_I4,4> T<29,MYTYPE,8> <field_id:1>
   U8U8ILOAD 0 T<4,.predef_I4,4> T<4,.predef_I4,4>
  I4U8CVT
 I4STID 0 <3,1,GET_VAL> T<4,.predef_I4,4>
 LOC 1 21 		 end function get_val
  I4I4LDID 0 <3,1,GET_VAL> T<4,.predef_I4,4>
 I4RETURN_VAL
 END_BLOCK
 LOC 1 22 		 
 LOC 1 23          end module assign_pointer_class
 LOC 1 24 			
 LOC 1 25 		 program main
FUNC_ENTRY <1,24,main_>
BODY
 BLOCK
 END_BLOCK
 BLOCK
 END_BLOCK
 BLOCK
 PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
 LOC 1 26          use assign_pointer_class
 VUSE <1,21,assign_pointer_class_>
 USE!!!!!
 LOC 1 27          type (mytype) :: x
 LOC 1 28 ! THIS IS THE RIGHT WAY
 LOC 1 29          integer, target :: a = 1
 LOC 1 30          call assign_pointer(x,a)
   MMLDID 0 <2,2,X> T<29,MYTYPE,8>
  U8PARM 257 T<29,MYTYPE,8> #  by_reference PASS_ADDRESS 
   I4I4LDID 0 <2,1,A> T<4,.predef_I4,4>
  U8PARM 257 T<4,.predef_I4,4> #  by_reference PASS_ADDRESS 
 VCALL 2174 <1,20,ASSIGN_POINTER> # flags 0x87e
 LOC 1 31 		 a=a+get_val(x);
   I4I4LDID 0 <2,1,A> T<4,.predef_I4,4>
     MMLDID 0 <2,2,X> T<29,MYTYPE,8>
    U8PARM 257 T<29,MYTYPE,8> #  by_reference PASS_ADDRESS 
   I4CALL 2174 <1,22,GET_VAL> # flags 0x87e
  I4ADD
 I4STID 0 <2,1,A> T<4,.predef_I4,4>
 LOC 1 32 		 if(a.EQ.2) then
 IF
   I4I4LDID 0 <2,1,A> T<4,.predef_I4,4>
   I4INTCONST 2 (0x2)
  I4I4EQ
 THEN
  BLOCK
 LOC 1 33                  print *, "OK"
  COMMENT <2,4,print *, "OK"> # 
  PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
   IO_ITEM <1,NONE>
   IO_ITEM <10,NONE>
    I4INTCONST 3 (0x3)
   IO_ITEM <73,FIRST_LAST_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <70,END_EOR_EOF_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <76,ENCODE_DECODE_FLAG>
    U8LDA 0 <1,27,"OK"> T<39,anon_ptr.,8>
    I8INTCONST 140763258159104 (0x800600000000)
    U4INTCONST 2 (0x2)
   IO_ITEM <96,CHAR> T<38,.ch_str.,1>
  IO <22,FORMATTED_WRITE,cray> 2
  PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
  END_BLOCK
 ELSE
 LOC 1 32
  BLOCK
 LOC 1 34                  else
 LOC 1 35                  print *, "failed"
  COMMENT <2,5,print *, "failed"> # 
  PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
   IO_ITEM <1,NONE>
   IO_ITEM <10,NONE>
    I4INTCONST 3 (0x3)
   IO_ITEM <73,FIRST_LAST_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <70,END_EOR_EOF_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <76,ENCODE_DECODE_FLAG>
    U8LDA 0 <1,29,"failed"> T<42,anon_ptr.,8>
    I8INTCONST 140763258159104 (0x800600000000)
    U4INTCONST 6 (0x6)
   IO_ITEM <96,CHAR> T<41,.ch_str.,1>
  IO <22,FORMATTED_WRITE,cray> 2
  PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
  END_BLOCK
 END_IF
 LOC 1 36                  end if
 LOC 1 37 		 
 LOC 1 38          end program main
 VCALL 2174 <1,25,_END> # flags 0x87e
 RETURN
 RETURN
 END_BLOCK
