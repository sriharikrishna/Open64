#
#
#  Copyright (C) 2000, 2001 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for arith.a
#

include	$(COMMONDEFS)

ifeq ($(BUILD_COMPILER), VENDOR)
  ifeq ($(BUILD_OS), IRIX)
    CVERSION =
    LCOPTS += $(STD_COMPILE_OPTS)
    WOFF = -fullwarn -woff 1209,1174
  endif
else
  CVERSION = -ansi -DTARG_IA64 -I. -I/usr/include -I$(BUILD_TOT)/clibinc
  LCOPTS  += $(STD_COMPILE_OPTS)
endif

ifeq ($(BUILD_VARIANT), DEBUG)  
  LCDEFS += -DInsist_On -DDEBUG_IR
endif

ifeq ($(BUILD_OS), LINUX)
  CVERSION += -D_LITTLE_ENDIAN
endif

ifeq ($(BUILD_OS), IRIX) # overrides "g77" even when using GNU compiler!
  F90 = f90
  F77 = f77
endif

F90FLAGS = $(OPTIMIZER) $(CSTYLE)
F77FLAGS = $(OPTIMIZER) $(CSTYLE)


GLDOPTS = $(STD_LOAD_OPTS)
LLDLIBS	= 


LIBRARY = arith.a

TARGETS = $(LIBRARY)

COMMON_UTIL_DIR= $(BUILD_TOT)/common/util
COMMON_COM_DIR= $(BUILD_TOT)/common/com

LDIRT = arith.i arith.a

LCINCS = -I$(BUILD_BASE) \
	$(XINC)

ARITH_SRC = 		\
	bits.c 		\
	compare.c 	\
	convert.c 	\
	cray_fadd.c 	\
	cray_fdiv.c 	\
	cray_fmul.c 	\
	cvt.c 		\
	edition.c 	\
	ieee_fadd.c 	\
	ieee_fdiv.c 	\
	ieee_fmul.c 	\
	ieee_norm.c 	\
	ieee_sqrt.c 	\
	intrin.c 	\
	math.c 		\
	miscmath.c 	\
	strcvt.c

#---------------------------------------------------------------------------
# decide whether to use native arithematic library or a simulator
#---------------------------------------------------------------------------
ifeq ($(BUILD_TARGET), IA64)
  ARITH_SRC += 		\
	native.c 	\
	test_ar_intrin.c
endif
ifeq ($(BUILD_TARGET), IA32)
  ARITH_SRC += 		\
	simulate.c
endif
ifeq ($(BUILD_TARGET), SPARC)  # use native C math library
  ARITH_SRC += 		\
	native.c
endif
ifeq ($(BUILD_TARGET), MIPS)
  ARITH_SRC += 		\
	simulate.c
endif

ifeq ($(BUILD_OS), IRIX)
  ARITH_SRC += 		\
	native.c 	\
	no_intrin.c
else
  ARITH_SRC += 		\
	cray1_sim.c
endif


CFILES= $(ARITH_SRC)


ifeq ($(BUILD_TARGET), IA64)
#
# these files have the routines stubed out.
# When we can fold these and compile with f90
# we will use the regular files.
#
FFILES= 			\
	fintrin_dc_irix_tmp.f 	\
	fintrin_irix_tmp.f
endif
ifeq ($(BUILD_TARGET), IA32)
FFILES= 			\
	dummy_dc.f 		\
	fintrin.f
endif
ifeq ($(BUILD_TARGET), MIPS)
FFILES=                         \
        fintrin_dc_irix.f       \
        fintrin_irix.f
endif   

#---------------------------------------------------------------------------
# Platform specific options
#---------------------------------------------------------------------------

ifeq ($(BUILD_OS), IRIX)
  ifeq ($(BUILD_COMPILER), VENDOR)
    CFLAGS += -woff 1209,1164,1174,1196,1498,1506,1552,3201
  endif
endif

ifeq ($(BUILD_OS), SOLARIS)
  CFLAGS = -D_SOLARIS_SOLARIS -D_SOLARIS -D__sparc__ $(LCINCS) $(OPTIMIZER) 
  ifeq ($(BUILD_COMPILER), VENDOR)
  ifeq ($(BUILD_SB), YES)
    CFLAGS += -xsb
  endif
  endif
endif

#---------------------------------------------------------------------------

default: depends $(TARGETS) last

include $(BUILD_TOT)/Makeinclude

exports: default
	$(INSTALL) $(STD_INSTALL_READ_MASK) -F $(STD_LIBRARY_LOC) $(TARGETS)

install: default
	$(STD_INSTALL) $(STD_INSTALL_READ_MASK) -F $(STD_LIBRARY_LOC) $(TARGETS)

include $(COMMONRULES)

VPATH = $(BUILD_BASE) $(COMMON_COM_DIR) $(COMMON_COM_MIPS_DIR) $(COMMON_TDT_DIR)

dummy_dc.o: dummy_dc.f
	$(F90) $(F90FLAGS) -c $(BUILD_BASE)/dummy_dc.f

fintrin.o: fintrin.f
	$(F90) $(F90FLAGS) -c $(BUILD_BASE)/fintrin.f

fintrin_dc_irix.o: fintrin_dc_irix.f
	$(F90) $(F90FLAGS) -c $(BUILD_BASE)/fintrin_dc_irix.f

fintrin_irix.o: fintrin_irix.f
	$(F90) $(F90FLAGS) -c $(BUILD_BASE)/fintrin_irix.f

fintrin_irix_f77.o: fintrin_irix_f77.f
	$(F77) $(F77FLAGS) -c $(BUILD_BASE)/fintrin_irix_f77.f

#------------------------------------------------------------------
# These are tmp targets for the stubed routines.
#------------------------------------------------------------------
fintrin_irix_tmp.o: fintrin_irix_tmp.f
	$(F77) $(F77FLAGS) -c $(BUILD_BASE)/fintrin_irix_tmp.f

fintrin_dc_irix_tmp.o: fintrin_dc_irix_tmp.f
	$(F77) $(F90FLAGS) -c $(BUILD_BASE)/fintrin_dc_irix_tmp.f
#------------------------------------------------------------------

edition.o:
	$(CC) $(CFLAGS) -c -DEDITION=\"`cat $(BUILD_BASE)/edition`\" $(BUILD_BASE)/edition.c

arith.cat: $(BUILD_BASE)/arith.msg
	$(CCF) -E $(BUILD_BASE)/arith.msg > arith.i
	$(TOOLROOT)/usr/bin/caterr -Yc,$(TOOLROOT)/usr/bin/gencat -Ym,$(ROOT)/usr/lib/tmac/tmac.sg -c arith.cat arith.i


#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is
#  built.
#----------------------------------------------------------------------

DIRTS = $(OBJECTS)

REAL_OBJS = $(filter %.o,$(OBJECTS))

$(LIBRARY) : $(REAL_OBJS)
	$(AR) r $@ $(REAL_OBJS)

