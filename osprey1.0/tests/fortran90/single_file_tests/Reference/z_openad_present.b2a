 LOC 0 0 source files:	1	"/m_home/m_utkej/Argonne/Dev/Current/OpenAD/Open64/osprey1.0/tests/fortran90/single_file_tests/present.f"
 LOC 1 1 		 subroutine opt(reqarg, optarg)
FUNC_ENTRY <1,20,opt_>
 IDNAME 0 <2,1,REQARG>
 IDNAME 0 <2,2,OPTARG>
BODY
 BLOCK
 END_BLOCK
 BLOCK
 END_BLOCK
 BLOCK
 PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
 LOC 1 2 		 integer, intent (out) :: reqarg
 LOC 1 3 		 logical, optional, intent (in) :: optarg
 LOC 1 4 		 if(present(optarg)) then
 IF
    I4I4LDID 0 <2,2,OPTARG> T<27,.log.4,4>
   U8PARM 1 T<27,.log.4,4> #  by_reference 
  I4CALL 2174 <1,21,PRESENT> # flags 0x87e
 THEN
  BLOCK
 LOC 1 5 			 if(optarg) then
  IF
   I4I4LDID 0 <2,2,OPTARG> T<27,.log.4,4>
  THEN
   BLOCK
 LOC 1 6 		            reqarg=1
    I4INTCONST 1 (0x1)
   I4STID 0 <2,1,REQARG> T<4,.predef_I4,4>
   END_BLOCK
  ELSE
 LOC 1 5
   BLOCK
 LOC 1 7 		         else
 LOC 1 8 		            reqarg=2
    I4INTCONST 2 (0x2)
   I4STID 0 <2,1,REQARG> T<4,.predef_I4,4>
   END_BLOCK
  END_IF
  END_BLOCK
 ELSE
 LOC 1 4
  BLOCK
 LOC 1 9 			 end if
 LOC 1 10 		  else
 LOC 1 11 			  reqarg=3
   I4INTCONST 3 (0x3)
  I4STID 0 <2,1,REQARG> T<4,.predef_I4,4>
  END_BLOCK
 END_IF
 LOC 1 12 		  end if
 LOC 1 13 		  end subroutine opt
 RETURN
 END_BLOCK
 LOC 1 14 		  
 LOC 1 15 		  program main
FUNC_ENTRY <1,22,main_>
BODY
 BLOCK
 END_BLOCK
 BLOCK
 END_BLOCK
 BLOCK
 INTERFACE <2,6,unnamed interface>
 BODY
  FUNC_ENTRY <1,20,opt_>
   IDNAME 0 <2,4,REQARG>
   IDNAME 0 <2,5,OPTARG>
 PRAGMA 0 120 <null-st> 0 (0x0) # PREAMBLE_END
 LOC 1 19 		     logical, optional, intent (in) :: optarg
 LOC 1 20                      end subroutine opt
 LOC 1 21                   end interface
 LOC 1 22 		  integer ret1, ret2, ret3
 LOC 1 23 		  call opt(ret1, .TRUE.)
   I4I4LDID 0 <2,1,RET1> T<4,.predef_I4,4>
  U8PARM 257 T<4,.predef_I4,4> #  by_reference PASS_ADDRESS 
   I4INTCONST 1 (0x1)
  U8PARM 8193 T<27,.log.4,4> #  by_reference COPY_IN 
 VCALL 2174 <1,20,opt_> # flags 0x87e
 LOC 1 24 		  call opt(ret2, .FALSE.)
   I4I4LDID 0 <2,2,RET2> T<4,.predef_I4,4>
  U8PARM 257 T<4,.predef_I4,4> #  by_reference PASS_ADDRESS 
   I4INTCONST 0 (0x0)
  U8PARM 8193 T<27,.log.4,4> #  by_reference COPY_IN 
 VCALL 2174 <1,20,opt_> # flags 0x87e
 LOC 1 25 		  call opt(ret3)
   I4I4LDID 0 <2,3,RET3> T<4,.predef_I4,4>
  U8PARM 257 T<4,.predef_I4,4> #  by_reference PASS_ADDRESS 
### attention: null WN pointer, place holder
 VCALL 2174 <1,20,opt_> # flags 0x87e
 LOC 1 26 		  if((ret1.EQ.1).AND.(ret2.EQ.2).AND.(ret3.EQ.3)) then
 IF
    I4I4LDID 0 <2,3,RET3> T<4,.predef_I4,4>
    I4INTCONST 3 (0x3)
   I4I4EQ
     I4I4LDID 0 <2,1,RET1> T<4,.predef_I4,4>
     I4INTCONST 1 (0x1)
    I4I4EQ
     I4I4LDID 0 <2,2,RET2> T<4,.predef_I4,4>
     I4INTCONST 2 (0x2)
    I4I4EQ
   I4LAND
  I4LAND
 THEN
  BLOCK
 LOC 1 27 			  print *, "OK"
  COMMENT <2,8,print *, "OK"> # 
  PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
   IO_ITEM <1,NONE>
   IO_ITEM <10,NONE>
    I4INTCONST 3 (0x3)
   IO_ITEM <73,FIRST_LAST_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <70,END_EOR_EOF_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <76,ENCODE_DECODE_FLAG>
    U8LDA 0 <1,25,"OK"> T<37,anon_ptr.,8>
    I8INTCONST 140763258159104 (0x800600000000)
    U4INTCONST 2 (0x2)
   IO_ITEM <96,CHAR> T<36,.ch_str.,1>
  IO <22,FORMATTED_WRITE,cray> 2
  PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
  END_BLOCK
 ELSE
 LOC 1 26
  BLOCK
 LOC 1 28 		  else
 LOC 1 29 			  print *, "failed"
  COMMENT <2,9,print *, "failed"> # 
  PRAGMA 0 177 <null-st> 0 (0x0) # START_STMT_CLUMP
   IO_ITEM <1,NONE>
   IO_ITEM <10,NONE>
    I4INTCONST 3 (0x3)
   IO_ITEM <73,FIRST_LAST_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <70,END_EOR_EOF_FLAG>
    I4INTCONST 0 (0x0)
   IO_ITEM <76,ENCODE_DECODE_FLAG>
    U8LDA 0 <1,27,"failed"> T<40,anon_ptr.,8>
    I8INTCONST 140763258159104 (0x800600000000)
    U4INTCONST 6 (0x6)
   IO_ITEM <96,CHAR> T<39,.ch_str.,1>
  IO <22,FORMATTED_WRITE,cray> 2
  PRAGMA 0 178 <null-st> 0 (0x0) # END_STMT_CLUMP
  END_BLOCK
 END_IF
 LOC 1 30 		  end if
 LOC 1 31 		  end program main
 VCALL 2174 <1,23,_END> # flags 0x87e
 RETURN
 RETURN
 END_BLOCK
